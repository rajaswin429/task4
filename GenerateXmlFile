//sql write
package Reader;

import java.io.File;
import java.io.FileOutputStream;


import java.util.ArrayList;
import java.util.Collections;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;


	public class GenerateXmlFile {
	        int minrow;
	        int maxrow;
	        int row;
	        int rownum;
	        int limit;
	       int avgrow;
	        int addresult;
	        ArrayList<Integer> rowarr = new ArrayList<Integer>();
	       

	        
	        
	        public GenerateXmlFile() {
	        	
	        }
	       public GenerateXmlFile(int rownum, int limit, int addresult, int minrow, int maxrow, int avgrow, int row){
	                this.rownum =  rownum;
	                this.limit = limit;
	                this.addresult =  addresult;
	                this.minrow =   minrow;
	                this.maxrow = maxrow;
	                this.avgrow = avgrow;
	                this.row =  row;
	        }




	      
	        
	        public  void  readingCol(int colnumber,int limit , ArrayList<Integer> Testarr)
	          {
	          for(int i = colnumber; i <= limit ; i++ ) {

	          rowarr.add(Testarr.get(i));

	          }
	          System.out.format("the %d row values are \n", row );
	          System.out.println(rowarr);
	          }

	      
	        
	        
	        
	        public void assigningValues(ArrayList<Integer> array) {
	                  System.out.println("");
	          for(int i : array ) {

	                  addresult =  addresult + i;
                 }

	         System.out.format("sum the elements of %dst row is :\n",row);


	          System.out.println(addresult);

	          System.out.format("sorting the %dst row\n", row, rowarr);

	          Collections.sort(rowarr);
	          System.out.println(rowarr);
	          minrow = rowarr.get(0);
	          System.out.format("the %dst row minimum element is %d ",row,rowarr.get(0));
	          
	          System.out.println();

	           maxrow = rowarr.get(rowarr.size() - 1);

	     System.out.format("the %dst row maximum value is %d \n " ,row,maxrow);

	     avgrow = addresult / rowarr.size();
	     System.out.format("the average of %dst row is  %d \n " ,row,(addresult / rowarr.size()) );

 System.out.println();

	        }


	        
	        
	       public void hello(int o) {
	    	   String fileName = "output.xml";

	            try {
	                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
	                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

	                // Check if the file already exists
	                File file = new File(fileName);
	                boolean fileExists = file.exists();

	                // If the file doesn't exist, create a new document with a root element
	                Document doc;
	                Element rootElement;
	                if (!fileExists) {
	                    doc = docBuilder.newDocument();
	                    rootElement = doc.createElement("root");
	                    doc.appendChild(rootElement);
	                } else {
	                    // Otherwise, parse the existing file and use its root element
	                    Document existingDoc = docBuilder.parse(file);
	                    rootElement = existingDoc.getDocumentElement();
	                    doc = existingDoc;
	                }

	            
	               
	                
	                
	                
	                
	                String elementName = "row" + o;
	    	        
	     	         Element row5 = doc.createElement(elementName);
	     	        rootElement.appendChild(row5);

	     	         Attr attr2 = doc.createAttribute("max");
	     	        int z =  maxrow; 
	     	         String A= String.valueOf(z); 
	     	         attr2.setValue(A);
	     	         row5.setAttributeNode(attr2);
	     	     
	    	
	     	    
	     	  
	     	         
	   			Element row2 = doc.createElement(elementName);
	               rootElement.appendChild(row2);

	            Attr attr3 = doc.createAttribute("min");
	           int j =  minrow; 
	            String B= String.valueOf(j); 
	            attr3.setValue(B);
	            row2.setAttributeNode(attr3);
	     	         
	     	         
	     	         
	            
	            
	           
	   	         Element row3 = doc.createElement(elementName);
	              rootElement.appendChild(row3);

	           Attr attr4 = doc.createAttribute("avg");
	          int k =  avgrow; 
	           String C = String.valueOf(k); 
	           attr4.setValue(C);
	           row3.setAttributeNode(attr4);
	           
	           
	           
	           
	   	         Element row4 = doc.createElement(elementName);
	              rootElement.appendChild(row4);

	           Attr attr5 = doc.createAttribute("addresult");
	          int l =  addresult; 
	           String D = String.valueOf(l); 
	           attr5.setValue(D);
	           row4.setAttributeNode(attr5);  
	   	        	 
	    	        	         
	    	        	         

	                // Write the updated document to the file
	                TransformerFactory transformerFactory = TransformerFactory.newInstance();
	                Transformer transformer = transformerFactory.newTransformer();
	                transformer.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, "yes");
	                DOMSource source = new DOMSource(doc);
	                StreamResult result = new StreamResult(new FileOutputStream(fileName, !fileExists));
	                transformer.transform(source, result);
	                System.out.println("File saved!");
	            
	            } catch (Exception e) {
	                e.printStackTrace();
	            }
			
	       }
	       
	}      
	        
	        
	        
	        
		
